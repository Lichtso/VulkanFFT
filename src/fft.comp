#version 450
#define PPCAT_NX(A, B) A ## B
#define PPCAT(A, B) PPCAT_NX(A, B)
#define M_SQRT1_2 0.707106781186547524401

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0) uniform UBO {
    uint strideX;
    uint strideY;
    uint strideZ;
    uint radixStride;
    uint stageSize;
    float directionFactor;
    float angleFactor;
    float normalizationFactor;
} ubo;

layout(binding = 1) readonly buffer DataIn {
    vec2 values[];
} dataIn;

layout(binding = 2) writeonly buffer DataOut {
    vec2 values[];
} dataOut;

uint indexInBuffer(uint index) {
    return index * ubo.strideX + gl_GlobalInvocationID.y * ubo.strideY + gl_GlobalInvocationID.z * ubo.strideZ;
}



void swapComplexNumbers(inout vec2 a, inout vec2 b) {
    vec2 aux = b;
    b = a;
    a = aux;
}

vec2 multComplexNumbers(vec2 a, vec2 b) {
    return mat2(a.x, a.y, -a.y, a.x) * b;
}

vec2 perpendicularComplexNumber(vec2 w) {
    return vec2(-w.y, w.x) * ubo.directionFactor;
}

vec2 angleBisectComplexNumber(vec2 w, float k) {
    return normalize((w + vec2(1.0, 0.0)) * k);
}

void butterfly(inout vec2 a, inout vec2 b, vec2 w) {
    vec2 t = multComplexNumbers(b, w);
    b = a - t;
    a = a + t;
}



void fft2(inout vec2 values[2], vec2 w) {
    butterfly(values[0], values[1], w);
}

void fft4(inout vec2 values[4], vec2 w) {
    butterfly(values[0], values[2], w);
    butterfly(values[1], values[3], w);
    vec2 w0 = angleBisectComplexNumber(w, 0.5);
    vec2 w1 = perpendicularComplexNumber(w0);
    butterfly(values[0], values[1], w0);
    butterfly(values[2], values[3], w1);
    swapComplexNumbers(values[1], values[2]);
}

void fft8(inout vec2 values[8], vec2 w) {
    butterfly(values[0], values[4], w);
    butterfly(values[1], values[5], w);
    butterfly(values[2], values[6], w);
    butterfly(values[3], values[7], w);
    vec2 w0 = angleBisectComplexNumber(w, 0.5);
    vec2 w1 = perpendicularComplexNumber(w);
    butterfly(values[0], values[2], w0);
    butterfly(values[1], values[3], w0);
    butterfly(values[4], values[6], w1);
    butterfly(values[5], values[7], w1);
    vec2 W0 = angleBisectComplexNumber(w, 0.25);
    vec2 W1 = perpendicularComplexNumber(W0);
    vec2 W2 = multComplexNumbers(W0, vec2(M_SQRT1_2, M_SQRT1_2 * ubo.directionFactor));
    vec2 W3 = perpendicularComplexNumber(W2);
    butterfly(values[0], values[1], W0);
    butterfly(values[2], values[3], W1);
    butterfly(values[4], values[5], W2);
    butterfly(values[6], values[7], W3);
    swapComplexNumbers(values[1], values[4]);
    swapComplexNumbers(values[3], values[6]);
}



void main() {
    uint invocationInBlock = gl_GlobalInvocationID.x & (ubo.stageSize - 1u);
    uint blockBeginInvocation = gl_GlobalInvocationID.x - invocationInBlock;
    uint outputIndex = invocationInBlock + blockBeginInvocation * RADIX;
    float angle = float(invocationInBlock) * ubo.angleFactor;
    vec2 twiddleFactor = vec2(cos(angle), sin(angle));

    vec2 values[RADIX];
    for(uint i = 0; i < RADIX; ++i)
        values[i] = dataIn.values[indexInBuffer(gl_GlobalInvocationID.x + i * ubo.radixStride)];

    PPCAT(fft, RADIX)(values, twiddleFactor);

    for(uint i = 0; i < RADIX; ++i)
        dataOut.values[indexInBuffer(outputIndex + i * ubo.stageSize)] = values[i] * ubo.normalizationFactor;
}
